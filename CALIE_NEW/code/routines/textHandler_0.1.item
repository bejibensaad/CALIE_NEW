package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class textHandler {

    /**
     * removeNull: returns the input String or "" if null.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} textHandler
     * 
     * {param} string(null) input: The string needing to be processed.
     * 
     * {example} removeNull("world") # world
     */
    public static String removeNull(String text) {
        if (text == null) {
        	text = ""; 
        }
        return text; 
    }
    
    /**
     * libelleCode: returns a formatted "libelle (code)" String.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} textHandler
     * 
     * {param} string(libelle) input: A String containing the label.
     * 
     * {param} string(code) input: A String containing the code.
     * 
     * {example} removeNull("libelle", "code") # libelle (code)
     */
    public static String libelleCode(String libelle, String code) {
        String text = "";
    	if (libelle == null) {
        	text = code; 
        }
    	else
    	{
    		text = libelle + " (" + code + ")";
    	}
        return text; 
    }
    
    /**
     * checkDefaulRecord: Checks String for DefaultRecord.
     * 
     * 
     * {talendTypes} boolean | Boolean
     * 
     * {Category} textHandler
     * 
     * {param} string(null) input: A String to check.
     * 
     * {example} checkDefaulRecord("DefaultRecord_article") # true
     */
    public static boolean checkDefaulRecord(String text) {
        
        return "DefaultRecord".equals(StringHandling.LEFT(text,13)) ; 
    }
    
    /**
     * processFileName: returns the input String without accents or spaces
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} textHandler
     * 
     * {param} string(null) input: The string needing to be processed.
     * 
     * {example} processFileName("EtatRéception") # EtatReception
     */
    public static String processFileName(String text) {
    	String[][] accents = {{"é", "e"},{"è", "e"},{"ê", "e"},{"ô", "o"},{"à", "a"}, {"î", "i"}, {"ù", "u"}, {" ", ""}};
    	
    	for (String[] strings : accents) {
    		text = StringHandling.EREPLACE(text, strings[0], strings[1]);
    	}
        return text; 
    }

}
